#!/home/minhchu1336/bin/venv/bin/python3

import sys
sys.set_int_max_str_digits(0)

from sympy import sympify
from time import time
from gmpy2 import mpz, is_prime

def check_prime():
    raw_input = input("Nh·∫≠p s·ªë ho·∫∑c bi·ªÉu th·ª©c c·∫ßn ki·ªÉm tra (vd: 2^44497 - 1): ").strip()
    cleaned_input = raw_input.replace(",", "").replace(" ", "").replace("^", "**").replace(".", "")

    try:
        # D√πng sympify ƒë·ªÉ parse bi·ªÉu th·ª©c an to√†n v√† h·ªó tr·ª£ s·ªë l·ªõn
        n = sympify(cleaned_input)

        if not n.is_Integer:
            print("‚ùó Bi·ªÉu th·ª©c ph·∫£i cho ra s·ªë nguy√™n.")
            return

        if n <= 1:
            print("‚ùå S·ªë ph·∫£i l·ªõn h∆°n 1 ƒë·ªÉ ki·ªÉm tra nguy√™n t·ªë.")
            return

        num_digits = len(str(n))
        print(n)
        print(f"(üî¢ S·ªë n√†y c√≥ {num_digits:,} ch·ªØ s·ªë) ƒëang ki·ªÉm tra ...")

        start = time()
        if is_prime(mpz(n), 25):  # 25 round Miller-Rabin (x√°c su·∫•t cao)
            print(f"‚úÖ l√† s·ªë nguy√™n t·ªë.")
        else:
            print(f"‚ùå {n} kh√¥ng ph·∫£i s·ªë nguy√™n t·ªë.")
        print(f"‚è± Th·ªùi gian ki·ªÉm tra: {round(time() - start, 4)} gi√¢y")

    except Exception as e:
        print(f"‚ùó L·ªói: {e}")

if __name__ == "__main__":
    check_prime()

